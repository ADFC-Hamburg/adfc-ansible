# ADFC {{ ansible_managed }}

server_names_hash_bucket_size 64;

server {
    listen 80;
{% if(jitsi_meet_ipv6_enable) %}
    listen [::]:80;
{% endif %}
    server_name {{ jitsi_meet_server_name }};

    location ^~ /.well-known/acme-challenge/ {
       default_type "text/plain";
       root         /usr/share/jitsi-meet;
    }
    location = /.well-known/acme-challenge/ {
       return 404;
    }
    location / {
       return 301 https://$host$request_uri;
    }
}
server {
    listen {{ '4444 http2' if(jitsi_meet_install_recommends) else '443'}} ssl;
{% if(jitsi_meet_ipv6_enable) %}
    listen [::]:{{ '4444 http2' if(jitsi_meet_install_recommends) else '443'}} ssl;
{% endif %}
    server_name {{ jitsi_meet_server_name }};


    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
    ssl_session_tickets off;

{#
# SSL Settings generated 2021-12-06, Mozilla Guideline v5.6, nginx 1.18.0, OpenSSL 1.1.1k, modern configuration
# https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=modern&openssl=1.1.1k&guideline=5.6
    # modern configuration
    ssl_protocols TLSv1.3;
    ssl_prefer_server_ciphers off;

#}

# https://ssl-config.mozilla.org/#server=nginx&version=1.18.0&config=intermediate&openssl=1.1.1k&guideline=5.6

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

{# end of intermediate #}

    ssl_dhparam  /etc/ssl/dhparams.pem;

    # OCSP stapling
    ssl_stapling on;
    ssl_stapling_verify on;

    # verify chain of trust of OCSP response using Root CA and Intermediate certs
    ssl_trusted_certificate  {{ jitsi_meet_ssl_cert_path }};

    add_header Strict-Transport-Security "max-age=31536000";

    ssl_certificate {{ jitsi_meet_ssl_cert_path }};
    ssl_certificate_key {{ jitsi_meet_ssl_key_path }};

    root /usr/share/jitsi-meet;

    # ssi on with javascript for multidomain variables in config.js
    ssi on;
    ssi_types application/x-javascript application/javascript;

    index index.html index.htm;
    error_page 404 /static/404.html;

    location = /config.js {
        alias /etc/jitsi/meet/{{ jitsi_meet_server_name }}-config.js;
    }

    location ~ ^/lang/(.*)$ {
        root /usr/share/jitsi-meet;
        add_header 'Access-Control-Allow-Origin' '*';
        try_files /lang-new/$1 /lang/$1 /static/404.html;
        break;
    }

    location = /external_api.js {
        alias /usr/share/jitsi-meet/libs/external_api.min.js;

    }

    #ensure all static content can always be found first
    location ~ ^/(libs|css|static|images|fonts|sounds|connection_optimization|.well-known)/(.*)$
    {
        add_header 'Access-Control-Allow-Origin' '*';
        alias /usr/share/jitsi-meet/$1/$2;
    }

    # BOSH
    location = /http-bind {
        proxy_pass      http://localhost:5280/http-bind;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
    }

    # xmpp websockets
    location = /xmpp-websocket {
        proxy_pass http://127.0.0.1:5280/xmpp-websocket?prefix=$prefix&$args;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $http_host;
        tcp_nodelay on;
    }

{% if(jitsi_meet_expose_colibri_stats) %}
    # Colibri REST
    location = /colibri/stats {
        proxy_pass http://localhost:8080/colibri/stats;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $http_host;
    }
{% endif %}

    location ~ ^/([^/?&:'"]+)$ {
        try_files $uri @root_path;
    }

    location @root_path {
        rewrite ^/(.*)$ / break;
    }

    location ~ ^/([^/?&:'"]+)/config.js$
    {
       set $subdomain "$1.";
       set $subdir "$1/";

       alias /etc/jitsi/meet/{{ jitsi_meet_server_name }}-config.js;
    }

    #Anything that didn't match above, and isn't a real file, assume it's a room name and redirect to /
    location ~ ^/([^/?&:'"]+)/(.*)$ {
        set $subdomain "$1.";
        set $subdir "$1/";
        rewrite ^/([^/?&:'"]+)/(.*)$ /$2;
    }

    # BOSH for subdomains
    location ~ ^/([^/?&:'"]+)/http-bind {
        set $subdomain "$1.";
        set $subdir "$1/";
        set $prefix "$1";

        rewrite ^/(.*)$ /http-bind;
    }

    # websockets for subdomains
    location ~ ^/([^/?&:'"]+)/xmpp-websocket {
        set $subdomain "$1.";
        set $subdir "$1/";
        set $prefix "$1";

        rewrite ^/(.*)$ /xmpp-websocket;
    }
}
