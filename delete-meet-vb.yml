- name: Remove Videobridge
  hosts: jitsi_vbs
  gather_facts: no
  roles:
    - backup-hcloud-letsencrypt
  tasks:
    - name: make sure videobride on meet is running
      systemd:
        name: jitsi-videobridge2
        state: started
      vars:
        ansible_user: root
      delegate_to: "{{ jitsi_meet_server_name }}"
      register: vb_start
      when: delete_start_meet_vb |default('yes')

    - name: Pause
      pause:
        seconds: 30
      when: delete_start_meet_vb |default('yes') and vb_start.changed

    - name: Perfom graceful shutdown
      uri:
        url: "http://127.0.0.1:8080/colibri/shutdown"
        method: POST
        body: '{ "graceful-shutdown": "true" }'
        body_format: json
      ignore_errors: yes
      ignore_unreachable: yes

    - name: Pause
      pause:
        seconds: 20

    - name: "stop videobride"
      systemd:
        name: jitsi-videobridge2
        state: stopped
      ignore_errors: yes
      ignore_unreachable: yes
      register: jitsi_stop

    - name: compress logfiles
      archive:
        path: /var/log
        dest: /tmp/ansible-trans-logs.tar.gz
      ignore_errors: true
      ignore_unreachable: yes

    - name: Fetch Remote
      fetch:
        mode: pull
        src: /tmp/ansible-trans-logs.tar.gz
        dest: /tmp/
        flat: yes
      ignore_errors: true
      ignore_unreachable: yes

    - name: Get hcloud API Token
      slurp:
        path: /root/hetzner-cloud.key
      register: hcloud_key_slurp
      delegate_to: proxmox01.adfc-intern.de

    - name: Setze hcloud_api_token
      set_fact:
        hcloud_api_token: "{{ hcloud_key_slurp.content | b64decode |trim }}"

    - name: Pause
      pause:
        seconds: 5
      when: delete_start_meet_vb |default('yes')

    - name: delete_host
      hcloud_server:
        api_token: "{{ hcloud_api_token }}"
        name: "{{ inventory_hostname }}"
        state: absent
      delegate_to: localhost

    - name: delete dns entry
      include_role:
        name: ucs_dns
      vars:
        ucs_dns_ips:
          - 127.0.0.1
          - ::1
        usc_dns_ttl_in_seconds: 60
        ucs_dns_waittime: 1

    - name: Copy to proxmox
      copy:
        src: /tmp/ansible-trans-logs.tar.gz
        dest: "/var/remote_logs/{{ inventory_hostname }}{{ lookup('pipe','date +%Y-%m-%d-%H-%M-%S') }}.tar.gz"
      ignore_errors: true
      delegate_to: proxmox01.adfc-intern.de

    - name: Delete tmp file
      file:
        path: /tmp/ansible-trans-logs.tar.gz
        state: absent
      ignore_errors: true
      delegate_to: localhost

    - name: find all files that are older than 14 days
      find:
        paths: "/var/remote_logs/"
        age: 14d
        recurse: no
      delegate_to: proxmox01.adfc-intern.de
      register: filesOlderThan

    - name: remove older files
      file:
        path: "{{ item.path }}"
        state: absent
      delegate_to: proxmox01.adfc-intern.de
      with_items: "{{ filesOlderThan.files }}"

    - name: Read Influx Password
      slurp:
        path: /etc/influx.secrect
      register: influx_pw
      delegate_to: proxmox01.adfc-intern.de

    - name: Write 0 Value to influx
      influxdb_write:
        hostname: "localhost"
        database_name: "telegraf"
        username: admin
        password: "{{ influx_pw.content |b64decode }}"
        data_points:
          - measurement: jitsi_stats
            tags:
              host: "{{ inventory_hostname_short }}"
              ansible: yes
            fields: "{{ influx_null_values }}"
      delegate_to: proxmox01.adfc-intern.de
