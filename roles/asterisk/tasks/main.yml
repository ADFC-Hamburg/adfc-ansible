---
- name: Install asterisk
  apt:
    name:
      - asterisk
      - unzip

- name: Test German Sounds
  stat:
    path: /usr/share/asterisk/sounds/de/confbridge-pin.sln16
  register: test_german_sounds

- name: Install German Sounds
  include_tasks: german_sounds.yml
  when: not test_german_sounds.stat.exists

- name: create adfc sounds dir
  file:
    path: "{{ asterisk_sounds_dir }}/adfc"
    state: directory
    mode: "0755"

- name: copy custom sound files
  copy:
    src: "{{ item }}"
    dest: "{{ asterisk_sounds_dir }}/adfc/"
    mode: "0644"
  loop: "{{ install_asterisk_sounds }}"
- name: get sipgate secret and SIP-Id
  slurp:
    src: /root/sipgate.secret
  register: sipgate_secret_b64
  delegate_to: proxmox01.adfc-intern.de
  tags: asterisk-extension

- name: set sipgate fact
  set_fact:
    sipgate_secret: "{{ sipgate_secret_b64.content | b64decode }}"
  tags: asterisk-extension

- name: set facts
  set_fact:
    sipgate_adfc_hh_number: "2086851"
    sipgate_adfc_hh_password: "{{ sipgate_secret.split(' ')[4] }}"
  tags: asterisk-extension

- name: check if password file is there
  stat:
    path: /etc/jigasi-sip.secret
  register: jigasi_sip_secret_stat

- name: Create Password file if empty
  copy:
    content: "{{ lookup('password', '/dev/null length=16') }}"
    dest: /etc/jigasi-sip.secret
    mode: "0600"
    owner: root
  when: not jigasi_sip_secret_stat.stat.exists

- name: read jigasi_sip secret
  slurp:
    path: /etc/jigasi-sip.secret
  register: jigasi_sip_secret

- name: create extension.conf
  template:
    src: extensions.conf.j2
    dest: /etc/asterisk/extensions.conf
    mode: 0644
  notify: asterisk extensions reload
  tags: asterisk-extension

- name: Create pjsip.conf
  template:
    src: pjsip.conf.j2
    dest: /etc/asterisk/pjsip.conf
    mode: 0644
  notify: asterisk pjsip reload
  tags: pjsip_conf

- name: Noload chan_sip
  blockinfile:
    path: /etc/asterisk/modules.conf
    marker: ;  ANSIBLE MANAGED BLOCK {mark}
    insertafter: noload => chan_modem_i4l.so
    block: |
      noload => chan_sip.so
  notify: asterisk restart

- name: Allow firewall for ipv4 sip
  ufw:
    rule: allow
    port: "5061"
    proto: udp
    src: "{{ item }}"
  loop: "{{ asterisk_sip_ips }}"

- name: Allow firewall for ipv4 rtp
  ufw:
    rule: allow
    port: 10000:20000
    proto: udp
    src: "{{ item }}"
  loop: "{{ asterisk_sip_ips }}"

- name: Create Asterisk Monitor
  copy:
    src: restart_asterisk_on_error.sh
    dest: /usr/local/sbin/restart_asterisk_on_error.sh
    mode: 0755
    owner: root
    group: root

- name: cron entry for monitor
  ansible.builtin.cron:
    name: asterisk_restart
    job: /usr/local/sbin/restart_asterisk_on_error.sh
    minute: 12,32,52
    user: root
    cron_file: ansible_asterisk
