#
#
# {{ ansible_managed }}
#
#

global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
        ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
        ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
        ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

##################################################
# BACKENDS
##################################################

{% for ha_backend_host in groups[haproxy_backend_group] %}
##################################################
# {{ ha_backend_host }}
##################################################
{% for le_domain in (hostvars[ha_backend_host]['haproxy_lets_encrypt_domains'] | default([ha_backend_host])) %}
backend lets_encrypt_{{ le_domain }}
    mode http
    server {{ le_domain }} {{ hostvars[ha_backend_host]['ansible_host']}}:80
{% endfor %}
{% for ha_site in (hostvars[ha_backend_host]['haproxy_ssl_sites'] | default([])) %}
backend https_{{ ha_site.domain }}
   mode http
   option forwardfor
   option httpchk {{ ha_site.httpchk |default('GET /') }}
   http-request set-header X-Forwarded-Port %[dst_port]
   http-request add-header X-Forwarded-Proto https if { ssl_fc }
   server {{ ha_site.domain }} {{ hostvars[ha_backend_host]['ansible_host']}}:{{ ha_site.port | default('443') }} check inter 60s ssl verify none
{% endfor %}
{% endfor %}

backend default_http
    errorfile 503 /etc/haproxy/static/fehler.http.static.html

backend default_https
   errorfile 503 /etc/haproxy/static/fehler.https.static.html

##################################################
# FRONTENDS
##################################################

frontend http
        bind :80
        mode http
        acl lets_encrypt path_beg /.well-known/acme-challenge/
        # redirects from http to https
{% for ha_backend_host in groups[haproxy_backend_group] %}
{% for le_domain in (hostvars[ha_backend_host]['haproxy_lets_encrypt_domains'] | default([ha_backend_host])) %}
        use_backend lets_encrypt_{{ le_domain }} if lets_encrypt  { hdr(Host) -i {{ le_domain }} }
{% endfor %}
{% endfor %}
        # set default backend
        default_backend default_http

frontend https
    option tcplog
    bind :443 ssl crt /etc/haproxy/certs/ ca-file /etc/haproxy/cert_auth/CA.pem verify optional crl-file /etc/haproxy/cert_auth/crl.pem
    tcp-request inspect-delay 5s
    tcp-request content accept if { req_ssl_hello_type 1 }
    http-request redirect scheme https unless { ssl_fc }
{% for ha_backend_host in groups[haproxy_backend_group] %}
{% for ha_site in (hostvars[ha_backend_host]['haproxy_ssl_sites'] | default([])) %}
{% set ha_acl = 'acl_'+ha_site.domain  %}

    # {{ ha_site.domain }}
    acl {{ ha_acl }} ssl_fc_sni {{ ha_site.domain }}
{% if ha_site.check_user_cert |default(true) %}
    http-request deny if {{ ha_acl }} !{ ssl_c_used 1 }
    http-request deny if {{ ha_acl }} !{ ssl_c_verify 0 }
{% endif %}
    use_backend https_{{ ha_site.domain }} if {{ ha_acl}}
{% endfor %}
{% endfor %}
    #acl acl-ucs-master ssl_fc_sni ucs-master.gst.hamburg.adfc.de
    #http-request deny if acl-ucs-master !{ ssl_c_used 1 } || acl-ucs-master !{ ssl_c_verify 0 }
    #use_backend https_ucs-master.gst.hamburg.adfc.de if acl-ucs-master
    default_backend default_https

backend proxmox
   description Back-end proxmox
   mode http
   balance roundrobin
   option forwardfor
   option httpchk GET /
   cookie SERVERID insert indirect nocache
   http-request set-header X-Forwarded-Port %[dst_port]
   http-request add-header X-Forwarded-Proto https if { ssl_fc }
   server matratze01 192.168.123.90:8006 cookie S1 check ssl verify none
   server matratze02 192.168.123.91:8006 cookie S2 check ssl verify none
