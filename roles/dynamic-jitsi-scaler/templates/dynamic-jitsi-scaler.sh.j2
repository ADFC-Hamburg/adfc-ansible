#!/bin/bash
# {{ ansible_managed }}
# This Script is called by cron every minute
{% set videobridges = [] %}
{% for myhost in groups['all'] %}
{% if myhost != 'meet.adfc-intern.de' and 'jitsi_meet_server_name' in hostvars[myhost] %}
{% if hostvars[myhost].jitsi_meet_server_name  == "meet.adfc-intern.de" %}
{{ videobridges.append(myhost) }}
{% endif %}
{% endif %}
{% endfor %}
# vbs: {{ videobridges}}
INFLUX_PW=$(cat /etc/influx.secrect)
INFLUX_DB="telegraf"
VB_HOST="meet"
HCLOUD_API_HEADER="Authorization: Bearer $(cat /root/hetzner-cloud.key)"
HCLOUD_API_SERVERS='https://api.hetzner.cloud/v1/servers'
TIMERANGE="5m"

# Da wir immer für einen volle Stunde bezahlen, macht es macht keinen Sinn einen Server auzuschalten
# wenn dieser z.B 62 Minuten gelaufen ist, weil wir ihn dann in den nächsten 58 Minuten ggf. wieder
# einschalten weil es doch wieder zu voll wird
# Auf der anderen Seite macht es auch keinen Sinn, erst in letzter Minute den Server auszuschalten, weil
# wir noch dinge wie keys kopieren machen und dass je nachdem mal länger oder kürzer dauern kann
#
# Das Minute_Modulo_limit sagt wieviele Minuten verbraucht sein müssen
MINUTE_MODULO_LIMIT="49"

HCLOUD_CACHE_VALID="20" # in minutes
CACHE_DIR="/var/cache/dynamic-jitsi-scaler/"

SSH_KEY="/root/.ssh/batch"
ANSIBLE_REPO="git://github.com/ADFC-Hamburg/adfc-ansible.git"
ANSIBLE_DIR="/usr/local/share/adfc-ansible"

ADMIN_MAIL={{ dynamic_admin_mail }}

source {{ dynamic_lib }}

SECONDS_SINCE_SUNDAY=$(seconds_since_sunday)

function prep_and_run_ansible_playbook() {
    ANSIBLE_PLAYBOOK="$1"
    LIMIT_HOST="$2"
    echo start $(date) > /tmp/an_playbook.log
    eval $(ssh-agent -t 600) >> /tmp/an_playbook.log
    ssh-add -q $SSH_KEY >>/tmp/an_playbook.log
    if [ -d "${ANSIBLE_DIR}"  ] ; then
        rm -f ${ANSIBLE_DIR} >> /tmp/an_playbook.log
    fi
    STATUS="FEHLER"
    git clone $ANSIBLE_REPO $ANSIBLE_DIR 2>&1 >> /tmp/an_playbook.log
    echo GIT_CLONE_RTN: $? >> playbook.log
    if [ -d "${ANSIBLE_DIR}"  ] ; then
        cd $ANSIBLE_DIR
        mv /tmp/an_playbook.log playbook.log
        run_ansible_playbook $ANSIBLE_PLAYBOOK $LIMIT_HOST
        RTN=$?
        echo "RTN: $RTN"  >> playbook.log
        echo end $(date) >> playbook.log
        clear_cache
        if [ "$RTN" == "0" ] ; then
            STATUS="OK"
        fi
        nl -ba playbook.log | mailx $ADMIN_MAIL -s "[adfc-jitsi] ${STATUS} $LIMIT_HOST Playbook ${ANSIBLE_PLAYBOOK} result"
        cd ..
        rm -rf "${ANSIBLE_DIR}"
    else
        nl -ba /tmp/an_playbook.log | mailx $ADMIN_MAIL -s "[adfc-jitsi] ${STATUS} $LIMIT_HOST Playbook ${ANSIBLE_PLAYBOOK} result"
    fi
    ssh-agent -k
}

function turn_server_on() {
    LIMIT_HOST=$1
    prep_and_run_ansible_playbook "setup-meet-vb.yml" $LIMIT_HOST
}

function turn_server_off() {
    LIMIT_HOST=$1
    prep_and_run_ansible_playbook "delete-meet-vb.yml" $LIMIT_HOST
}

function safe_query_participants() {
    SERVER=$1
    RTN=$(query_participants $SERVER)
    if [ "${RTN}" == "NULL" -o "${RTN}" == "null" -o "${RTN}" == "" ] ; then
        echo 0
    else
        echo $RTN
    fi
}

function safe_query_conferences() {
    SERVER=$1
    RTN=$(query_conferences $SERVER)
    if [ "${RTN}" == "NULL" -o "${RTN}" == "null" -o "${RTN}" == "" ] ; then
        echo 0
    else
        echo $RTN
    fi
}

mkdir -p "${CACHE_DIR}"

PARTICIPANTS=$(safe_query_participants meet)
CONFERENCES=$(safe_query_conferences meet)
if [ $PARTICIPANTS -ge 1 ] ; then
    echo meet P: ${PARTICIPANTS} C: ${CONFERENCES}
fi
{% for videobridge in videobridges %}
PARTICIPANTS_VB=$(safe_query_participants {{ videobridge |regex_replace('\..*','') }})
CONFERENCES_VB=$(safe_query_conferences {{ videobridge |regex_replace('\..*','') }})
if [ $PARTICIPANTS_VB -ge 1 ] ; then
    echo {{ videobridge}} P: ${PARTICIPANTS_VB} C: ${CONFERENCES_VB}
fi
PARTICIPANTS=$((PARTICIPANTS + PARTICIPANTS_VB))
CONFERENCES=$((CONFERENCES + CONFERENCES_VB))
{% endfor %}
if [ $PARTICIPANTS -ge 1 ] ; then
    echo total P: ${PARTICIPANTS} C: ${CONFERENCES}
fi

echo SECONDS_SINCE_SUNDAY=$SECONDS_SINCE_SUNDAY
{% for videobridge in videobridges %}
{% set turn_on_part = hostvars[videobridge]['dynamic_jitsi_scaler_turn_on']['participants']  %}
{% set turn_on_conf = hostvars[videobridge]['dynamic_jitsi_scaler_turn_on']['conferences']  %}
{% set turn_off_part = hostvars[videobridge]['dynamic_jitsi_scaler_turn_off']['participants']  %}
{% set turn_off_conf = hostvars[videobridge]['dynamic_jitsi_scaler_turn_off']['conferences'] %}

# --------------------------------------------------------------------------------------
# Test fuer {{ videobridge}}
# --------------------------------------------------------------------------------------
FORCE_ON=0
{% if 'timerange' in hostvars[videobridge]['dynamic_jitsi_scaler_turn_on'] %}
{% for timerange in hostvars[videobridge]['dynamic_jitsi_scaler_turn_on']['timerange'] %}
# if from day={{ timerange.from.weekday }} {{ timerange.from.hour }}:{{ timerange.from.min }} (((({{ timerange.from.weekday }}*24)+{{ timerange.from.hour }} )*60)+{{ timerange.from.min }})*60  to day={{
    timerange.to.weekday }} {{ timerange.to.hour }}:{{ timerange.to.min }} (((({{ timerange.to.weekday }}*24)+{{ timerange.to.hour }} )*60)+{{ timerange.to.min }})*60
{% set tr_from_seconds = ((((timerange.from.weekday *24)+ timerange.from.hour)*60)+timerange.from.min)*60 %}
{% set tr_to_seconds = ((((timerange.to.weekday *24)+ timerange.to.hour)*60)+timerange.to.min)*60 %}
if [ ${SECONDS_SINCE_SUNDAY} -ge {{ tr_from_seconds }} -a ${SECONDS_SINCE_SUNDAY} -le {{ tr_to_seconds }} ] ; then
    FORCE_ON=1
fi
{% endfor %}
{% endif %}
HETZNER_JSON=$(query_hetzner_server |jq -r '.[] | select(.name == "{{ videobridge }}")')
if [ "${HETZNER_JSON}" = "" ] ; then
    if [ $PARTICIPANTS -ge {{ turn_on_part }} -a $CONFERENCES -ge {{ turn_on_conf }} ] ; then
        turn_server_on {{ videobridge }}
    elif [ $FORCE_ON = "1" ] ; then
        echo FORCE_ON
        turn_server_on {{ videobridge }}
    fi
else
    IS_SERVER_ON=1
    CREATED=$(echo ${HETZNER_JSON} |jq -r '.created')
    CREATED_SEC=$(date -d "${CREATED}" +%s)
    NOW_SEC=$(date +%s)
    MINUTE_MODULO=$(( ((NOW_SEC - CREATED_SEC) % 3600) / 60))
    echo {{ videobridge}} CRE $CREATED CRE_SEC $CREATED_SEC  NOW $(date +%s)  Minute Modulo: $MINUTE_MODULO
    if [ $PARTICIPANTS -le {{ turn_off_part  }} -a $CONFERENCES -le {{ turn_off_conf }} -a $MINUTE_MODULO -ge $MINUTE_MODULO_LIMIT ] ; then
        if [ $FORCE_ON = "1" ] ; then
            echo FORCE_ON=1 - Not turned off
        else
            turn_server_off {{ videobridge }}
        fi
    fi
fi
{% endfor %}

